notes on python refresh

relearned:

hash maps (dicts):

phonebook = {'bob':333, 'sue':444} < create
phonebook.pop('bob') < delete

functions and function parameters:

def myFunc(one):
    print(one)
    return 22

classes:

class MyClass:
    variableName = "bob"
    def classFunc(arg):
        return variableName + arg

lists:

names = ['bob', 'sue']
names.append('joe')
del s[i]
names.clear()
names.insert(index, var)
names.pop([i])

loops:

for x in range(5):
    if x+y<5:
        break
    print("hi")
else:
    print("not printed because of break")

while <condition>:

list comprehensions:

words = ['abc', 'def', 'fghi']
shortWords = [word for word in words if len(word) < 4]

generators (using yield):

def fibonacci():
    a, b = 1, 1
    yield a+b
    a, b = b, a+b

for n in fibonacci():
    if n > 20:
        break
    print(n)

exceptions:

try:
    thing to do
except Exception as e:
    print(e)

numpy/pandas
regexes:
sets 

decorators: 

I don't get it.  Seems like a way to make code complex enough to be hard to skill up on.  todo: find a better decorator tutorial that is concise.

map/filter/reduce:

map function allows for shorter version of the for loop concept.  zip pairs up across iterables (eg two sets paired together as they go. filter allows to pass iterables through a filter function.  and reduce just applies a function across an iterable.  kind of like a sum over array values, but you can also apply more logic via functions

lambda:

anonymous function:

f = lambda x: x**2 

same as

def f(x):
    return x**2

sockets:

create_connection/create_server, ping pong and data encoding challenge.

memoization:

use lru_cache from functools, cpython impl
